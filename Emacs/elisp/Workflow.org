#+TITLE: Org Mode Workflow
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/in-org-workflow.el

This file contains the description and configuration of the productivity workflow I use with Org Mode.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#required-packagesvariables][Required packages/variables]]
- [[#file-paths][File Paths]]
- [[#workflow-states][Workflow States]]
- [[#tags][Tags]]
- [[#agendas][Agendas]]
- [[#module-setup][Module Setup]]
:END:

* Required packages/variables
#+begin_src emacs-lisp

(require 'org)
(require 'org-agenda)

#+end_src

* File Paths

The location where my =Notes= folder lives changes in some cases

TODO: Rename Index.org
#+begin_src emacs-lisp


  (custom-set-variables
   '(org-directory "~/Dropbox/Notes")
   '(org-agenda-files (list org-directory)))

  (defun my/org-path (path)
    (expand-file-name path org-directory))

  (setq org-default-notes-file (my/org-path "Index.org"))

#+end_src

* Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily:

- =TODO= - A task that should be done at some point
- =NEXT= - This task should be done next (in the Getting Things Done sense)
- =BACK= - A task in the backlog to be done some day but not now
- =WAIT= - Waiting for someone else to be actionable again
- =DONE= - It's done!

I also make sure to set them up in the order I want =org-sort-entries= to sort them in when I use the =o= option upon invoking that command.

#+begin_src emacs-lisp

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "|" "WAIT(w)" "BACK(b)")))

  ;; TODO: org-todo-keyword-faces
  (setq org-todo-keyword-faces
    '(("NEXT" . (:foreground "orange red" :weight bold))
      ("WAIT" . (:foreground "HotPink2" :weight bold))
      ("BACK" . (:foreground "MediumPurple3" :weight bold))))

#+end_src

* Tags

Tags are used to filter all tasks to find anything actionable in a particular context.  I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =followup= - Someone is waiting on me to follow up on this task, it should be prioritized above others
- =batch= - The task can be batched with others (low effort)

#+begin_src emacs-lisp

  ;; Configure common tags
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("batch" . ?b)
       ("followup" . ?f)))

#+end_src

* Agendas

#+begin_src emacs-lisp

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'day)
  (setq org-agenda-start-with-log-mode t)

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Index Tasks")
                   (org-agenda-files '(,(my/org-path "Index.org")))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))

#+end_src

* Module Setup

This Org file produces a file called =org-workflow.el= which gets loaded up in =Init.org=; export it as a feature so that it can be loaded with =require=.

#+begin_src emacs-lisp

(provide 'in-org-workflow)

#+end_src
